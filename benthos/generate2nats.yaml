input:
  generate:
    mapping: |
      root = {        
        "id":uuid_v4(),
        "message": fake("sentence"),
        "created_by": fake("username"),
        "created_at": now()
      }
    count: ${B_GENERATE_COUNT}
    interval: ${B_GENERATE_INTERVAL}
    batch_size: 1

pipeline:
  processors:
    - label: root_try
      try:
        - label: simulate_error
          bloblang: root = if random_int() % 5 == 0 { throw("simulated error") }

        - label: get_joke_branch
          branch:
            request_map: root = null
            processors:
              - label: get_joke
                http:
                  url: "https://api.chucknorris.io/jokes/random"
                  verb: GET
                  timeout: 5s
            result_map: root.joke = this

        - label: set_processed_state
          bloblang: |
            root = this
            root.is_processed = true

output:
  switch:
    cases:
      - check: errored()
        output:
          nats_jetstream:
            urls:
              - ${B_NATS_URL}
            subject: demo.messages_dlq
      - output:
          nats_jetstream:
            urls:
              - ${B_NATS_URL}
            subject: demo.messages

logger:
  level: ${B_LOG_LEVEL:INFO}
  format: logfmt
  level_name: level
  timestamp_name: time
  message_name: msg
  static_fields:
    service: demo

http:
  enabled: true
  address: ${B_HTTP_ADDRESS}
  debug_endpoints: false

shutdown_delay: 30s
