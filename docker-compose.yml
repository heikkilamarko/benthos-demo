services:
  nats:
    build: ./nats
    image: redpanda-connect-demo/nats
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - nats:/nats
    networks:
      - redpanda-connect-demo

  nats-configure:
    build: ./nats-configure
    image: redpanda-connect-demo/nats-configure
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./env/nats-configure.env
    networks:
      - redpanda-connect-demo
    depends_on:
      - nats

  postgres:
    build: ./postgres
    image: redpanda-connect-demo/postgres
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./env/postgres.env
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - redpanda-connect-demo

  minio:
    image: minio/minio
    deploy:
      restart_policy:
        condition: on-failure
    command: server /data --console-address ":9001"
    env_file:
      - ./env/minio.env
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data
    networks:
      - redpanda-connect-demo

  minio-configure:
    build: ./minio-configure
    image: redpanda-connect-demo/minio-configure
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./env/minio-configure.env
    networks:
      - redpanda-connect-demo
    depends_on:
      - minio

  prometheus:
    build: ./prometheus
    image: redpanda-connect-demo/prometheus
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - prometheus:/prometheus
    networks:
      - redpanda-connect-demo

  grafana:
    build: ./grafana
    image: redpanda-connect-demo/grafana
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./env/grafana.env
    volumes:
      - grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - redpanda-connect-demo
    depends_on:
      - postgres
      - prometheus

  fake-http-postgres-part1:
    build: ./redpanda-connect/fake-http-postgres/part1
    image: redpanda-connect-demo/fake-http-postgres-part1
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./env/redpanda-connect.env
    networks:
      - redpanda-connect-demo
    depends_on:
      - fake-http-postgres-part2

  fake-http-postgres-part2:
    build: ./redpanda-connect/fake-http-postgres/part2
    image: redpanda-connect-demo/fake-http-postgres-part2
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./env/redpanda-connect.env
    ports:
      - "8001:8080"
    networks:
      - redpanda-connect-demo
    depends_on:
      - postgres

  fake-nats:
    build: ./redpanda-connect/fake-nats
    image: redpanda-connect-demo/fake-nats
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./env/redpanda-connect.env
    networks:
      - redpanda-connect-demo
    depends_on:
      - nats

  http-minio:
    build: ./redpanda-connect/http-minio
    image: redpanda-connect-demo/http-minio
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./env/redpanda-connect.env
    ports:
      - "8002:8080"
    networks:
      - redpanda-connect-demo
    depends_on:
      - minio

  http-azure-blob:
    build: ./redpanda-connect/http-azure-blob
    image: redpanda-connect-demo/http-azure-blob
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ./env/redpanda-connect.env
    ports:
      - "8003:8080"
    networks:
      - redpanda-connect-demo

networks:
  redpanda-connect-demo:
    name: redpanda-connect-demo

volumes:
  nats:
  postgres:
  minio:
  prometheus:
  grafana:
